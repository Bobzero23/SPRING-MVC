RUNNING A WEB APP
1. As we run a normal java class we need a class with a main. It is same to spring boot but the only difference is
   you will have to put this annotation @SpringBootApplication

STATIC FOLDER IN RESOURCES
There is where you put your HTML or CSS and also IMAGES

TO INVOKE THE WEB
1. We need a controller class which will tell the web that we invoking the web from a particular class.
2. Inside that class we use the @Controller annotation
3. Inside the controller class you need to write the method to tell that anyone who opens e.g /home should be redirected
   to e.g home.html and for that we going to use the @RequestMapping("/home") annotation

APPLICATION.PROPERTIES FOLDER
1. Is where you should go if you wanna make any configuration by yourself

CHANGING THE SERVER PORT
1. Go to application.properties folder and write -> server.port = 8081

CHANGING THE CONTEXT PATH
1. Go to application.properties folder and write -> server.servlet.context-path = /demonstration

RANDOM PORT NUMBER
1. Simple go to application.properties folder and write -> server.port = 0
    this will tell the spring that the programmer wants to start the server in a random ports each time
    it is helpful if you wanna run your web app in different instances

LOCAL HOST 8080
1. Using small configuration you can run your localhost without mentioning the /home, check the controller class
    @RequestMapping(value = {"", "/", "home"})

THYMELEAF
1. Moder server side template engine which provides a way for a developer to work frontend and backend, and let
   the developers to deploy their work on the single server
2. By working with Spring MVC, generates the html content based on the template we want

HOW TO USE THYMELEAF
1. Create your html folder inside the template folder because thymeleaf is a template file
2. then you need to import the namespace of the thymeleaf inside of a html file in the html tag
    after you do that your html wills start using thymeleaf tags which start with th
3. After doing that we gonna pass the Model interface and its object on the particular html controller file
    then we will be good to go
4. After passing the Model interface as a parameter in the particular html method then you use the mode.addAttribute
    methods which accepts a variable and a value inside it and both are in quotes "".

DISABLING CACHE IN THYMELEAF
1. This is why you wont have to restart the server everytime you make some change in you template
you just build and then you are good to go
To do it go to the your properties.application and say spring.thymeleaf.cache = false
For more information go check the application properties app there are more details
This is not for java codes so if you change java code you gonna have to restart the server

                                SPRING BOOT DEVTOOLS
This makes you just write java code and just build and you are good to go

DOWNLOAD LIVERELOAD EXTENSION IN YOUR WEB BROWSER

                                MVC (MODEL VIEW CONTROLLER)
1. The main objective is to achieve loose double coupling inside the web application we are building.

MVC ARCHITECTURE
1.Client send a request in a http format
2.The request goes to Servlet Container such as Tomcat, this convert the http request to the servlet request
    and sending the request to the dispatcher servlet
3.Dispatcher servlet only knows the path but it doesn't anything else like method or which controller and for
    that it goes and ask handler mapping like which controller and which method shall be invoked and it will
    finish the rest by visiting those controller and invoking the methods needed
4. Then the controller will return the view which shall be displayed to the client as a response like view.html
    but the dispatcher doesn't know about the views so it goes and ask View Resolver
5. View resolver will finish the view job and all return the view to the servlet dispatcher and again it sends back
    to the server and the server sends it back to the client

                                       WEBSITE PROJECT
1. Putting the HEADER and the FOOTER html code in different files
   but you will import the files of those two files code on their places in the home.html file

REDIRECTING A PARTICULAR LINK TO ANOTHER USING THYMELEAF
th:href="@{/home}"

REDIRECTING A HTML FILE TO ANOTHER HTML FILE
<div th:replace="header :: header"></div>

             WEB CONFIG FILE
TO AVOID CREATING CONTROLLERS EVERYTIME
1. Create a package called webconfig
2. Create a pojo class which is going to handle all he controllers inside it
3. That class is going to implement the WebMvcConfigurer
4. That class will also have the @Configuration annotation
5. Inside that class you override a method called addViewControllers and that is
   how you are going to configure all the controllers just like that inside that method. For more info look at the code

QUICK TIP:
sometimes the webpage doesn't reload automatically even after you used the devtools the thing is go to your LOCAL
maven file and delete the files found inside the target file and that will resolve this issue

GETTING THE MESSAGE FROM THE PAGE
1. Go to the particular html file controller which you are working with and create another method and pass the map too.
2. Create a method with value ModelAndView which takes @RequestParam for each value match in the html, please make sure
    the values matches I mean from UI and in the code you are writing


MODEL AND VIEW
This object is used when you want to take an input from the user and to tell the user than you received the input by like
maybe emptying the blanks e.t.c ...

SUBMITTING INFORMATION FROM A PAGE
Sometimes submitting information might become hard if there a lot of info input to take from the page so fot that
there is a good approach for it by creating a package which will handle the models and there you create a pojo
which taking all the values and create their getters and setters and also the toString method.

NORMALLY INSIDE A PRODUCT WEB SERVICE YOU WILL BUILD YOUR LOGIC SUCH A WAY THAT INSIDE YOUR CONTROLLER LAYER YOU WILL DO
ALL YOUR PRIMARY VALIDATION AND AFTER FINISHING THAT YOU WILL GIVE THE JOB TO SERVICE LAYER AND AFTER SERVICE LAYER IS DONE
IT WILL SEND THE WORK TO THE PERSISTENCE LAYER AND TO MAKE ALL OF THESE WORK TOGETHER YOU GONNA HAVE TO THE AUTO WIRING
INJECTION IN CONTACT CONTROLLER EXAMPLE IF YOU WANNA WORK WITH CONTACT SERVICE, AFTER YOU DO THE INJECTION THE OBJECT OF
THEN INJECTED CLASS WILL BE A BEAN WHICH WE CAN USE TO CALL ITS METHODS IN THE CERTAIN POJO

HOW TO SEND A DATA FROM BACKEND TO FRONTEND
1. We need a certain class which will define the structure of a particular html file, which we normally put in model package
    inside this pojo class you can have the field and constructor etc. check the codes
2. We need a controller class for mapping the structure here is where we do the wiring to and define our business logic

LOMBOK
This is a java library which provides some annotation to help a java programmer not to repeat some statements e.g getters
and setter, this library do create all the getter and setters in the background when we use its annotation
1.@Data is the common annotation which has all getters and setter and some more inside it.
2.@Slf4j is the annotation we use for Log instead of creating a log object use this and use the log object directly.
To start to use it, You gonna have to inject its dependencies

QUERY PARAM
1. This is mostly being used in the times of filtering the products like when you go to amazon searching for products and
there you can filter the price like only high or whatever that the usage of the query param
2. Between query param you use & sign to separate them and is a good practice to use to most three params
3. We normally use the @RequestParam annotation to to accept the query or accept the form data tha we're going to receive
5. We can also make the request param as MANDATORY or OPTIONAL, is like the user cant pass without filling the blank
6. To use them go to the particular link e.g holidays in footer.html and thymeleaf provides us an easy way to do this
7. After that you go the particular controller class and accepting the params
Note: Adding your params to Model attribute will give you an advantage to be able to send them back to the user
this are those links appear left bottom of the screen whenever hover around the cursor on the links in the website

DISPLAYING THE COLUMN ACCORDINGLY
Thymeleaf provides us the ability to make the html display according to the condition we put as we did in the
holidays.html to the rows and columns for the festival holidays e.g th:if="${festival} == true" and that's it.








